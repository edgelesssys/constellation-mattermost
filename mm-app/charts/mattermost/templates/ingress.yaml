# Only deploy the respective ingress object if it does not already exist. Otherwise nginx complains about the host/path already being defined during upgrade.
{{- if eq .Values.environment "staging" }}
{{- $exists := lookup "v1" "Ingress" .Release.Namespace "mm-ingress-staging" -}}
{{ if $exists }}
{{ else }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mm-ingress-staging
  annotations:
    external-dns.alpha.kubernetes.io/hostname: staging.{{ .Values.hostname }}
    cert-manager.io/issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - staging.{{ .Values.hostname }}
    secretName: tls-cert
  rules:
  - host: staging.{{ .Values.hostname }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mattermost
            port:
              number: 8065
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: mattermost
            port:
              number: 8067
  ingressClassName: nginx
{{- end -}}
{{- else if eq .Values.environment "prod" }}
{{- $exists := lookup "v1" "Ingress" .Release.Namespace "mm-ingress-prod" -}}
{{ if $exists }}
{{ else }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mm-ingress-prod
  annotations:
    external-dns.alpha.kubernetes.io/hostname: {{ .Values.hostname }}
    cert-manager.io/issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - {{ .Values.hostname }}
    secretName: tls-cert
  rules:
  - host: {{ .Values.hostname }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mattermost
            port:
              number: 8065
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: mattermost
            port:
              number: 8067
  ingressClassName: nginx
{{- end -}}
{{- end }}
